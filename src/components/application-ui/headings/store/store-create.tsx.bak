'use client';

import { Store } from '@/services/store.service';
import { getProviderChip, getTierColor } from '@/utils/ui/store.page';
import CloseIcon from '@mui/icons-material/Close';
import EditIcon from '@mui/icons-material/Edit';
import EditLocationAltIcon from '@mui/icons-material/EditLocationAlt';
import OpenInNewIcon from '@mui/icons-material/OpenInNew';
import SaveIcon from '@mui/icons-material/Save';
import ShieldIcon from '@mui/icons-material/Shield';
import StoreMallDirectoryIcon from '@mui/icons-material/StoreMallDirectory';
import VerifiedIcon from '@mui/icons-material/Verified';
import {
  Avatar,
  Box,
  Chip,
  Divider,
  IconButton,
  Stack,
  TextField,
  Tooltip,
  Typography,
  useMediaQuery,
  useTheme,
} from '@mui/material';
import { useSearchParams } from 'next/navigation';

type Props = {
  image?: string;
  address: string;
  kioskUrl: string;
  qrImageUrl?: string;
  showQrBadge?: boolean;
  edit: boolean;
  saving: boolean;
  name: string;
  type: Store['type'];
  provider: Store['provider'];
  active: boolean;
  verifiedByTwilio?: boolean;
  onEdit: () => void;
  onSave: () => void;
  onCancel: () => void;
  onNameChange?: (val: string) => void;
};

export default function StoreHeader({
  image,
  address,
  kioskUrl,
  qrImageUrl,
  showQrBadge,
  edit,
  saving,
  name,
  type,
  provider,
  active,
  verifiedByTwilio,
  onEdit,
  onSave,
  onCancel,
  onNameChange,
}: Props) {
  const theme = useTheme();
  const mdUp = useMediaQuery(theme.breakpoints.up('md'));
  const searchParams = useSearchParams();

  const extractSlug = (url?: string) => {
    if (!url) return undefined;
    try {
      const u = new URL(url);
      return u.searchParams.get('slug') ?? undefined;
    } catch {
      return undefined;
    }
  };
  const slug = extractSlug(kioskUrl);

  const qrHref = slug
    ? `http://localhost:3001?slug=${encodeURIComponent(slug)}`
    : undefined;

  const inferredShow = (searchParams.get('tag') || '').toLowerCase() === 'general-info';
  const shouldShowQr = typeof showQrBadge === 'boolean' ? showQrBadge : inferredShow;

  const tier = getTierColor(type);
  const providerChip = getProviderChip(provider);

  const iconBg = 'rgba(0,0,0,0.06)';
  const iconBgHover = 'rgba(0,0,0,0.12)';

  return (
    <Box
      sx={{
        p: { xs: 2, md: 3 },
        background: tier.bg,
        color: tier.text,
        display: 'flex',
        flexDirection: { xs: 'column', md: 'row' },
        alignItems: { xs: 'stretch', md: 'center' },
        gap: { xs: 1.5, md: 2 },
      }}
    >
      <Stack direction="row" spacing={1.5} alignItems="center" sx={{ minWidth: 0 }}>
        <Avatar
          src={image}
          alt={name}
          sx={{
            width: { xs: 48, md: 56 },
            height: { xs: 48, md: 56 },
            border: '2px solid rgba(255,255,255,0.7)',
            flex: '0 0 auto',
          }}
        />

        <Box sx={{ flex: 1, minWidth: 0 }}>
          {edit ? (
            <TextField
              size="small"
              fullWidth
              value={name}
              onChange={(e) => onNameChange?.(e.target.value)}
              placeholder="Nombre de la tienda"
              inputProps={{ style: { fontWeight: 800 } }}
            />
          ) : (
            <Typography variant={mdUp ? 'h6' : 'subtitle1'} sx={{ fontWeight: 800, letterSpacing: 0.2, lineHeight: 1.1 }} noWrap title={name}>
              {name}
            </Typography>
          )}

          <Stack direction="row" spacing={1} useFlexGap sx={{ mt: 1, flexWrap: 'wrap' }}>
            <Chip size="small" icon={<StoreMallDirectoryIcon />} label={type?.toUpperCase?.() ?? ''} />
            <Chip size="small" color={providerChip.color} icon={providerChip.icon} label={provider === 'twilio' ? 'Twilio' : 'Bandwidth'} />
            {active ? (
              <Chip size="small" color="success" icon={<VerifiedIcon />} label="Activa" sx={{ color: '#fff' }} />
            ) : (
              <Chip size="small" color="warning" label="Inactiva" />
            )}
            {verifiedByTwilio && <Chip size="small" icon={<ShieldIcon />} label="Verificada" />}
          </Stack>
        </Box>

        {mdUp && (
          <Stack direction="row" spacing={1} sx={{ flex: '0 0 auto', alignItems: 'center' }}>
            {!edit ? (
              <>
                <Tooltip title="Editar">
                  <IconButton sx={{ bgcolor: iconBg, '&:hover': { bgcolor: iconBgHover } }} onClick={onEdit}>
                    <EditIcon />
                  </IconButton>
                </Tooltip>
                <Tooltip title="Editar en Google Maps">
                  <IconButton
                    sx={{ bgcolor: iconBg, '&:hover': { bgcolor: iconBgHover } }}
                    onClick={() => {
                      const addr = encodeURIComponent(address || '');
                      window.open(`https://www.google.com/maps/search/?api=1&query=${addr}`, '_blank');
                    }}
                  >
                    <EditLocationAltIcon />
                  </IconButton>
                </Tooltip>
                <Tooltip title="Abrir Kiosko">
                  <IconButton sx={{ bgcolor: iconBg, '&:hover': { bgcolor: iconBgHover } }} onClick={() => window.open(kioskUrl, '_blank')}>
                    <OpenInNewIcon />
                  </IconButton>
                </Tooltip>

                {shouldShowQr && qrHref && (
                  <Box
                    component="a"
                    href={qrHref}
                    target="_blank"
                    rel="noopener noreferrer"
                    aria-label="Abrir sorteo (QR)"
                    sx={{
                      ml: 1,
                      display: 'inline-flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      width: 40,
                      height: 40,
                      borderRadius: 1.5,
                      border: '1px solid',
                      borderColor: 'divider',
                      bgcolor: 'background.paper',
                      overflow: 'hidden',
                      cursor: 'pointer',
                      transition: 'transform 120ms ease, box-shadow 120ms ease',
                      boxShadow: 0,
                      '&:hover': { transform: 'translateY(-1px)', boxShadow: 2 },
                    }}
                  >
                    {qrImageUrl ? (
                      <Box component="img" src={qrImageUrl} alt="QR" sx={{ width: '100%', height: '100%', objectFit: 'cover' }} />
                    ) : (
                      <Box sx={{ width: '100%', height: '100%', display: 'grid', placeItems: 'center', fontSize: 10, color: 'text.secondary' }}>
                        QR
                      </Box>
                    )}
                  </Box>
                )}
              </>
            ) : (
              <>
                <Tooltip title="Cancelar">
                  <span>
                    <IconButton sx={{ bgcolor: iconBg, '&:hover': { bgcolor: iconBgHover } }} onClick={onCancel} disabled={saving}>
                      <CloseIcon />
                    </IconButton>
                  </span>
                </Tooltip>
                <Tooltip title="Guardar cambios">
                  <span>
                    <IconButton sx={{ bgcolor: iconBg, '&:hover': { bgcolor: iconBgHover } }} onClick={onSave} disabled={saving}>
                      <SaveIcon />
                    </IconButton>
                  </span>
                </Tooltip>

                {shouldShowQr && qrHref && (
                  <Box
                    component="a"
                    href={qrHref}
                    target="_blank"
                    rel="noopener noreferrer"
                    aria-label="Abrir sorteo (QR)"
                    sx={{
                      ml: 1,
                      display: 'inline-flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      width: 40,
                      height: 40,
                      borderRadius: 1.5,
                      border: '1px solid',
                      borderColor: 'divider',
                      bgcolor: 'background.paper',
                      overflow: 'hidden',
                      cursor: 'pointer',
                      transition: 'transform 120ms ease, box-shadow 120ms ease',
                      boxShadow: 0,
                      '&:hover': { transform: 'translateY(-1px)', boxShadow: 2 },
                    }}
                  >
                    {qrImageUrl ? (
                      <Box component="img" src={qrImageUrl} alt="QR" sx={{ width: '100%', height: '100%', objectFit: 'cover' }} />
                    ) : (
                      <Box sx={{ width: '100%', height: '100%', display: 'grid', placeItems: 'center', fontSize: 10, color: 'text.secondary' }}>
                        QR
                      </Box>
                    )}
                  </Box>
                )}
              </>
            )}
          </Stack>
        )}
      </Stack>

      {!mdUp && <Divider sx={{ my: 1 }} />}
    </Box>
  );
}
